@using AlDS.Coursework.Board.BoardModel;
@using AlDS.Coursework.Board.UserModel
@using Microsoft.AspNetCore.Identity
@using AlDS.Coursework.Board.RelatedTablesModel
@using AlDS.Coursework.WebApplicationTest.Data

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@model AlDS.Coursework.Board.BoardModel.Board;

@{
    Layout = "../../Pages/Shared/_Layout.cshtml";
}



<div class="person_main_page">


    <header class="Title">
        <div class="headers_link">
            <a class="identity" href="https://localhost:7240/">На главную</a>
            <div class="identity">
                <form class="button_identity" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/", new { area = "" })" method="post" >
                <button class="button_identity" type="submit">Выйти из аккаунта</button>
                </form>
            </div>
        </div>
        <div class="icon">
            <span class="icon_size"><i class="bi bi-tablet-landscape"></i></span>
        </div>
    </header>

    <div class="board">

        <div class="board_information">
            <p class="p_board">@Model.Title</p>     
            
        </div>

        <div class="board_setting"> 

            <table class="board_details">
                <tbody class ="board_details">
                @foreach(var elem in @Model.Cards)
                {
                    <tr class="table_details">
                        <td class="td_details">
                            <p class="p_board">@elem.Title</p>
                        </td>
                        @foreach(var note in elem.Notes)
                        {
                            <td class="td_board_name">
                                <a class="a_board" href="../../Note/Index/@note.NoteId">
                                    <p class="p_board">@note.Title</p>
                                </a>
                            </td>
                        }
                        <td class="td_board_name">
                              <form asp-action="Create" method="post">
                                 <input type="hidden" name="CreatorId" value = @User.Identity.Name>
                                 <input type="hidden" name="CardId" value = @elem.CardId>
                                 <input type="hidden" name="BoardId" value = @elem.BoardId>
                                <input class="placeholderCard" type="text" name="Title" placeholder="Введите название новой карты"/>
                                <input formaction="../../Note/Create" type="submit" value="Отправить" />
                              </form>                            
                        </td>
                        <td class="td_board_name">
                                @Html.RouteLink("Delete", new { controller = "Card", action = "Delete", id = @elem.CardId, BoardId=@elem.BoardId } )
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            <div class="board_details">
                <form method="post">
                   <input type="hidden" name="CreatorId" value = @User.Identity.Name>
                   <input type="hidden" name="BoardId" value = @Model.BoardId>
                   <input class="p_board" type="text" name="Title" placeholder="Добавить новые дела" />
                  <input formaction="../../Card/Create" type="submit" value="Окей" />
                </form>  
            </div>
        </div>

    </div>
</div>


   @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }

<script>
    function myFunction() {
      document.getElementById("myDropdown").classList.toggle("show");
    }
    window.onclick = function(event) {
      if (!event.target.matches('.dropbtn')) {
        var dropdowns = document.getElementsByClassName("dropdown-content");
        var i;
        for (i = 0; i < dropdowns.length; i++) {
          var openDropdown = dropdowns[i];
          if (openDropdown.classList.contains('show')) {
            openDropdown.classList.remove('show');
          }
        }
      }
    }



    const blockes = document.querySelectorAll('.block'),
        boxes = document.querySelectorAll('.box');

    let dragElem = null;


    blockes.forEach(block => {
        block.draggable = true;
        block.addEventListener('dragstart', startDragBlock);
        block.addEventListener('dragend', endDragBlock);
    });

    function startDragBlock() {
        console.log('dragstart');
        dragElem = this;
        setTimeout(() => {
            this.classList.add('hide');
        }, 0);
    }
    function endDragBlock() {
        console.log('dragend');
        dragElem = null;
        this.classList.remove('hide');
    }

    boxes.forEach(box => {
        box.addEventListener('dragover', dragBoxOver);
        box.addEventListener('dragenter', dragBoxEnter);
        box.addEventListener('dragleave', dragBoxLeave);
        box.addEventListener('drop', dropInBox);
    })


    function dragBoxOver(evt) {
        console.log('dragover');
        evt.preventDefault();
        this.classList.add('hover');
    }
    function dragBoxEnter(evt) {
        console.log('dragenter');
        evt.preventDefault();
        this.classList.add('hover');
    }
    function dragBoxLeave() {
        console.log('dragleave');
        this.classList.remove('hover');
    }
    function dropInBox(evt) {
        console.log('drop');
        this.append(dragElem);
        this.classList.remove('hover');
    }
</script>